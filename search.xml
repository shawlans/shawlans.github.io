<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何使用Hexo创建博客</title>
      <link href="/2025/08/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8Hevo%E6%A1%86%E6%9E%B6%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/08/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8Hevo%E6%A1%86%E6%9E%B6%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的博客！这是一个非常详细的、从零开始在windows系统使用 Hexo + GitHub Pages 搭建个人博客的保姆级教程。<br>即使你是新手，按照这个步骤也能成功搭建。</p><p>整个过程分为以下几个主要步骤：<br>1.准备工作：安装必要的软件环境 (Node.js, Git)。<br>2.安装 Hexo：安装 Hexo 博客框架。<br>3.本地运行：在你的电脑上创建并预览博客。<br>4.创建 GitHub 仓库：为你的博客网站和源码创建托管空间。<br>5.配置部署：将 Hexo 与 GitHub 仓库关联起来。<br>6.发布博客：将你的博客部署到互联网上。<br>7.日常使用：如何写新文章和更换主题。</p><h2 id="第一步：准备工作-环境安装"><a href="#第一步：准备工作-环境安装" class="headerlink" title="第一步：准备工作 (环境安装)"></a>第一步：准备工作 (环境安装)</h2><p>在开始之前，你的电脑需要安装 Node.js 和 Git。</p><h3 id="1-安装-Git"><a href="#1-安装-Git" class="headerlink" title="1. 安装 Git"></a>1. 安装 Git</h3><p>Git 是一个版本控制系统，Hexo 部署博客时需要用到它。<br>官方网站：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br>根据你的操作系统（Windows&#x2F;Mac&#x2F;Linux）下载并安装。安装过程基本上一路“下一步”即可。<br>验证安装：打开你的终端（Windows 用户可以使用 Git Bash、CMD 或 PowerShell），输入以下命令：</p><pre><code>  git --version</code></pre><p>如果显示出版本号（如 git version 2.38.1.windows.1），说明安装成功。</p><h3 id="2-安装-Node-js"><a href="#2-安装-Node-js" class="headerlink" title="2. 安装 Node.js"></a>2. 安装 Node.js</h3><p>Hexo 是基于 Node.js 的，所以必须安装它。<br>官方网站：<a href="https://nodejs.org/">https://nodejs.org/</a><br>建议下载 LTS (长期支持版)，它更稳定。<br>安装过程同样是一路“下一步”。Node.js 安装包会自带 npm (Node.js 包管理器)。<br>验证安装：在终端中输入以下命令：</p><pre><code>  node -v  npm -v</code></pre><p>如果分别显示出 Node.js 和 npm 的版本号，说明安装成功。</p><h2 id="第二步：安装-Hexo"><a href="#第二步：安装-Hexo" class="headerlink" title="第二步：安装 Hexo"></a>第二步：安装 Hexo</h2><p>环境准备好后，就可以通过 npm 全局安装 Hexo 的命令行工具了。<br>在终端中输入以下命令：</p><pre><code>  npm install -g hexo-cli#npm install 是安装命令。-g 表示全局安装，这样你就可以在任何目录下使用 hexo 命令。</code></pre><h2 id="第三步：本地创建并运行博客"><a href="#第三步：本地创建并运行博客" class="headerlink" title="第三步：本地创建并运行博客"></a>第三步：本地创建并运行博客</h2><p>现在，你可以在本地电脑上创建一个博客项目了。</p><h3 id="1-初始化博客"><a href="#1-初始化博客" class="headerlink" title="1.初始化博客"></a>1.初始化博客</h3><p>选择一个你喜欢的位置（比如 D:\Blog），在该目录下打开终端，执行以下命令：</p><pre><code>  hexo init my-blog  # &quot;my-blog&quot; 是你的博客文件夹名，可以自定义</code></pre><h3 id="2-进入博客目录"><a href="#2-进入博客目录" class="headerlink" title="2      进入博客目录"></a>2      进入博客目录</h3><pre><code>  cd my-blog</code></pre><h3 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3.安装依赖"></a>3.安装依赖</h3><p>进入文件夹后，你会看到很多文件。现在需要安装项目所需的依赖包。</p><pre><code>  npm install</code></pre><h3 id="4-本地预览"><a href="#4-本地预览" class="headerlink" title="4.本地预览"></a>4.本地预览</h3><p>激动人心的时刻！启动 Hexo 的本地服务，看看你的博客长什么样。</p><pre><code>  hexo server  或者简写  hexo s</code></pre><p>终端会显示：<br>INFO Hexo is running at <a href="http://localhost:4000/">http://localhost:4000</a> . Press Ctrl+C to stop.<br>现在，打开浏览器，访问 <a href="http://localhost:4000，你就能看到">http://localhost:4000，你就能看到</a> Hexo 的默认博客页面了！<br>提示：在终端按 Ctrl+C 可以停止本地服务。</p><h2 id="第四步：创建-GitHub-仓库"><a href="#第四步：创建-GitHub-仓库" class="headerlink" title="第四步：创建 GitHub 仓库"></a>第四步：创建 GitHub 仓库</h2><p>要将博客发布到网上，你需要一个地方来托管它。GitHub Pages 是最完美的免费选择。</p><h3 id="1-注册-GitHub-账号"><a href="#1-注册-GitHub-账号" class="headerlink" title="1.注册 GitHub 账号"></a>1.注册 GitHub 账号</h3><p>如果你还没有，先去 <a href="https://github.com/">https://github.com/</a> 注册一个账号。</p><h3 id="2-创建博客网站仓库"><a href="#2-创建博客网站仓库" class="headerlink" title="2.创建博客网站仓库"></a>2.创建博客网站仓库</h3><p>这是用来存放你 最终生成的静态网站文件 (HTML&#x2F;CSS&#x2F;JS) 的地方。<br>o点击 GitHub 页面右上角的 + 号，选择 New repository。<br>o仓库名称 (Repository name) 必须是特定的格式：你的用户名.github.io。<br>例如，如果你的 GitHub 用户名是XXX，那么仓库名必须是XXX.github.io。这一点至关重要！<br>o选择 Public (公开)。<br>o点击 Create repository。</p><h2 id="第五步：配置部署"><a href="#第五步：配置部署" class="headerlink" title="第五步：配置部署"></a>第五步：配置部署</h2><p>现在，需要让你的本地 Hexo 项目知道应该把网站文件推送到哪里。</p><h3 id="1-安装-Git-部署插件"><a href="#1-安装-Git-部署插件" class="headerlink" title="1.安装 Git 部署插件"></a>1.安装 Git 部署插件</h3><p>Hexo 需要一个插件来帮助它通过 Git 进行部署。在你的博客根目录 (my-blog) 下的终端中执行：</p><pre><code>  npm install hexo-deployer-git --save</code></pre><h3 id="2-配置-config-yml-文件"><a href="#2-配置-config-yml-文件" class="headerlink" title="2.配置 _config.yml 文件"></a>2.配置 _config.yml 文件</h3><p>这是 Hexo 的核心配置文件，位于你的博客根目录 (my-blog) 下。用代码编辑器（如 VS Code）打开它。<br>找到文件末尾的 deploy 部分，修改成如下格式：</p><pre><code>  # Deployment## Docs: https://hexo.io/docs/one-command-deployment  deploy:  type: git  repo: https://github.com/你的用户名/你的用户名.github.io.git  branch: main # 或者 master，取决于你的GitHub仓库默认分支名  # type: 必须是 git。# repo: 换成你上一步创建的 你的用户名.github.io 仓库的 URL。你可以在仓库主页的 Code 按钮下找到这个 URL (推荐使用 HTTPS 格式)。# branch: GitHub 现在默认新建的分支是 main，如果你的仓库是 master，请修改为 master。</code></pre><p>注意：YAML 格式对缩进非常敏感，type:, repo:, branch: 前面必须有两个空格。</p><h2 id="第六步：发布你的博客"><a href="#第六步：发布你的博客" class="headerlink" title="第六步：发布你的博客"></a>第六步：发布你的博客</h2><p>万事俱备，只欠东风。现在可以将你的博客部署到 GitHub Pages 了。<br>在你的博客根目录 (my-blog) 下的终端中，依次执行以下命令：</p><h3 id="1-清除缓存-可选，但推荐-不清楚缓存可能会导致网页内容不更新"><a href="#1-清除缓存-可选，但推荐-不清楚缓存可能会导致网页内容不更新" class="headerlink" title="1.清除缓存 (可选，但推荐,不清楚缓存可能会导致网页内容不更新)"></a>1.清除缓存 (可选，但推荐,不清楚缓存可能会导致网页内容不更新)</h3><pre><code>  hexo clean</code></pre><h3 id="2-生成静态文件"><a href="#2-生成静态文件" class="headerlink" title="2.生成静态文件"></a>2.生成静态文件</h3><p>这个命令会把你的 Markdown 文章转换成网站所需的 HTML、CSS 等文件，存放在 public 文件夹中。</p><pre><code>  hexo generate# 或者简写  hexo g</code></pre><h3 id="3-部署到-GitHub"><a href="#3-部署到-GitHub" class="headerlink" title="3.部署到 GitHub"></a>3.部署到 GitHub</h3><p>这个命令会将 public 文件夹里的所有内容推送到你配置好的 GitHub 仓库中。</p><pre><code>  hexo deploy# 或者简写  hexo d</code></pre><p>执行 hexo deploy 时，它会要求你输入 GitHub 的用户名和密码（或 Personal Access Token），按提示操作即可。<br>现在，见证奇迹！<br>等待一两分钟，然后访问你的 GitHub Pages 网址：https:&#x2F;&#x2F;你的用户名.github.io。<br>恭喜！你的个人博客已经成功上线了！</p><h2 id="第七步：日常使用"><a href="#第七步：日常使用" class="headerlink" title="第七步：日常使用"></a>第七步：日常使用</h2><h3 id="1-如何写新文章？"><a href="#1-如何写新文章？" class="headerlink" title="1. 如何写新文章？"></a>1. 如何写新文章？</h3><p>非常简单，使用 hexo new 命令。</p><pre><code>  hexo new &quot;我的第一篇文章&quot;</code></pre><p>Hexo 会在 source&#x2F;_posts 文件夹下创建一个名为 我的第一篇文章.md 的 Markdown 文件。你只需要用任何支持 Markdown 的编辑器（如 VS Code, Typora）打开它，开始写作即可。<br>写完后，按照 第六步 的流程重新部署一遍：</p><pre><code>  hexo clean &amp;&amp; hexo g -d  # 简写组合命令</code></pre><p>这个命令会先清除、再生成、最后部署。稍等片刻，你的新文章就出现在网站上了。</p><h3 id="2-如何更换主题？"><a href="#2-如何更换主题？" class="headerlink" title="2. 如何更换主题？"></a>2. 如何更换主题？</h3><p>Hexo 有海量漂亮的主题。以广受欢迎的 Next 主题为例：</p><h4 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1.下载主题"></a>1.下载主题</h4><p>在你的博客根目录 (my-blog) 下，执行 Git 命令下载主题到 themes 文件夹：</p><pre><code>  git clone https://github.com/next-theme/hexo-theme-next themes/next</code></pre><h4 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2.修改配置"></a>2.修改配置</h4><p>打开根目录的 _config.yml 文件，找到 theme 字段，修改为：</p><pre><code>  # Extensions  ## Plugins: https://hexo.io/plugins/  ## Themes: https://hexo.io/themes/  theme: next</code></pre><h4 id="3-重新生成和部署"><a href="#3-重新生成和部署" class="headerlink" title="3.重新生成和部署"></a>3.重新生成和部署</h4><pre><code>  hexo clean &amp;&amp; hexo g -d</code></pre><p>刷新你的网站，就能看到全新的主题了！每个主题都有自己详细的配置文档，你可以根据文档进行个性化设置。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，你已经掌握了使用 Hexo 和 GitHub Pages 搭建和维护个人博客的全套流程。<br>•本地写作：hexo new “文章名”<br>•本地预览：hexo s<br>•发布上线：hexo g -d<br>•     清楚缓存，生成静态文件并部署：hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy（或者使用简写 hexo clean &amp;&amp; hexo g -d）<br>祝你写作愉快！</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
